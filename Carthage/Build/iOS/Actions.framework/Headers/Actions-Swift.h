#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.2.2 effective-4.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Actions",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Protocol used to convert Swift closures into ObjC selectors
SWIFT_PROTOCOL("_TtP7Actions6Action_")
@protocol Action
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly) SEL _Nonnull selector;
@end




@interface NSNotificationCenter (SWIFT_EXTENSION(Actions))
/// Adds an entry to the receiver’s dispatch table with a closure and optional criteria: notification name and sender.
/// The observation lives until it is manually stopped,, so be sure to invoke <code>stopObserving(_)</code> when the observation is not longer needed
/// \param name The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param object The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer. Default is <code>nil</code>.
///
/// \param action The closure which will be called when a notification with the criteria is sent
///
///
/// returns:
/// The action that has been added to the receiver. You can catch this value to stop observing it by calling <code>stopObserving(_)</code>.
- (id <Action> _Nonnull)observe:(NSNotificationName _Nullable)name object:(id _Nullable)object action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.observe(_:object:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Adds an entry to the receiver’s dispatch table with a closure and optional criteria: notification name and sender.
/// The observation lives while the <code>observer</code> is not deallocated. In case you need stop the observation before the òbserver<code>is deallocated, you can do it by invoking</code>stopObserving(_)`.
/// note:
/// Due to internal implementation, the defaul method <code>removeObserver</code> not take any effect on obervations registered using this method.
/// \param observer Object registering as an observer. This value must not be nil.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param name The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param object The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer. Default is <code>nil</code>.
///
/// \param action The closure which will be called when a notification with the criteria is sent
///
///
/// returns:
/// The action that has been added to the receiver. You can catch this value to stop observing it by calling <code>stopObserving(_)</code>.
- (id <Action> _Nonnull)addWithObserver:(NSObject * _Nonnull)observer name:(NSNotificationName _Nullable)name object:(id _Nullable)object action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.add(observer:name:object:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Stop observing the given action.
/// \param action The action which won’t be observed anymore
///
- (void)stopObservingWithAction:(id <Action> _Nonnull)action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.stopObserving(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Removes all the entries specifying a given observer from the receiver’s dispatch table.
/// Be sure to invoke this method (or stopObserver(_:name:object:)) before observer or any object specified in add(observer:name:action:) is deallocated.
/// You should not use this method to remove all observers from an object that is going to be long-lived, because your code may not be the only code adding observers that involve the object.
/// \param observer Object unregistered as observer.
///
/// \param name The name of the notification for which to unregister the observer; if nil, notifications with any name will be stopped.
///
/// \param object The object whose notifications the observer wants to stop; if nil, notifications from any object will be stopped.
///
- (void)stopObserver:(NSObject * _Nonnull)observer name:(NSNotificationName _Nullable)name object:(id _Nullable)object SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.stopObserver(_:name:object:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface NSTimer (SWIFT_EXTENSION(Actions))
/// \code
/// Initializes a new Timer object using the specified action.
/// The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is true, every ti after that.
/// - parameter fireAt: The time at which the timer should first fire.
/// - parameter interval: For a repeating timer, this parameter contains the number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
/// - parameter userInfo: Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
/// - parameter repeats: If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
/// - parameter action: The closure called on the timeout
/// - returns: The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is YES, every ti after that.
///
/// \endcode
- (nonnull instancetype)initWithFireAt:(NSDate * _Nonnull)fireDate interval:(NSTimeInterval)interval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'Timer.init(fireAt:interval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new Timer object using the specified action.
/// The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is true, every ti after that.
/// \param timeInterval The number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
///
/// \param userInfo Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
///
/// \param repeats If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
///
/// \param action The closure called on the timeout
///
///
/// returns:
/// A new Timer object, configured according to the specified parameters.
- (nonnull instancetype)initWithTimeInterval:(NSTimeInterval)interval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'Timer.init(timeInterval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Creates and returns a new Timer object and schedules it on the current run loop in the default mode.
/// \param timeInterval The number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
///
/// \param userInfo Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
///
/// \param repeats If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
///
/// \param action The closure called on the timeout
///
///
/// returns:
/// A new Timer object, configured according to the specified parameters.
+ (NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)timeInterval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'Timer.scheduledTimer(timeInterval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

@class UIImage;

@interface UIBarButtonItem (SWIFT_EXTENSION(Actions))
/// Initializes a new item using the specified image and other properties.
/// \param image The images displayed on the bar are derived from this image. If this image is too large to fit on the bar, it is scaled to fit. Typically, the size of a toolbar and navigation bar image is 20 x 20 points. The alpha values in the source image are used to create the images—opaque values are ignored.
///
/// \param landscapeImagePhone The style of the item. One of the constants defined in UIBarButtonItemStyle. nil by default
///
/// \param style The style of the item. One of the constants defined in UIBarButtonItemStyle. (.Plain by default)
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image landscapeImagePhone:(UIImage * _Nullable)landscapeImagePhone style:(UIBarButtonItemStyle)style action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(image:landscapeImagePhone:style:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new item using the specified title and other properties.
/// \param title The item’s title.
///
/// \param style The style of the item. One of the constants defined in UIBarButtonItemStyle. (.Plain by default)
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title style:(UIBarButtonItemStyle)style action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(title:style:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new item containing the specified system item.
/// \param systemItem The system item to use as the first item on the bar. One of the constants defined in UIBarButtonSystemItem.
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithBarButtonSystemItem:(UIBarButtonSystemItem)systemItem action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(barButtonSystemItem:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIControl (SWIFT_EXTENSION(Actions))
/// Add an action for the given control evetn.
/// The action is not performed immediately, instead it is scheduled to be executed after the given time interval.
/// If the control event is triggered again before the time interval expires, the previous call is canceled.
/// It prevents the action of being triggered more than once in the given time interval.
/// \param event The event which triggers the action
///
/// \param interval The time interval to wait before performing the action
///
/// \param handler The action which will be executed when the time itnerval expires.
///
- (void)throttle:(UIControlEvents)event interval:(NSTimeInterval)interval handler:(void (^ _Nonnull)(void))handler SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.throttle(_:interval:handler:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Remove the current Throttle (if any) for the given control event
/// \param event The event whose Throttle will be removed
///
- (void)removeThrottleFor:(UIControlEvents)event SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.removeThrottle(for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIControl (SWIFT_EXTENSION(Actions))
/// Adds the given action as response to the given control event.
/// \param event The event that the control must receive to trigger the closure
///
/// \param action The closure that will be called when the gesture is detected
///
///
/// returns:
/// The added action
- (id <Action> _Nonnull)addWithEvent:(UIControlEvents)event action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.add(event:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable the given action to be launched as response of the received event
/// \param action The action to disable
///
/// \param events The control events that you want to remove for the specified target object
///
- (void)removeWithAction:(id <Action> _Nonnull)action forControlEvents:(UIControlEvents)events SWIFT_DEPRECATED_MSG("Use remove(_:for:) instead") SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.remove(action:forControlEvents:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable the given action to be launched as response of the received event
/// \param action The action to disable
///
/// \param events The control events that you want to remove for the specified target object
///
- (void)remove:(id <Action> _Nonnull)action for:(UIControlEvents)events SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.remove(_:for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable all the actions for a given event to be launched as response of the received event.
/// <em>NOTE</em>: Just the actions added using the <code>Actions</code> method will be removed!.
/// \param events The control events that you want to remove for the specified target object
///
- (void)removeActionsFor:(UIControlEvents)events SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.removeActions(for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(Actions))
/// Initializes a new item with the given action
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified action.
- (nonnull instancetype)initWithAction:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIGestureRecognizer.init(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIView (SWIFT_EXTENSION(Actions))
/// Adds the given action as response to a single tap gesture.
/// \param gesture The gesture that the view must receive to trigger the closure
///
/// \param action The closure that will be called when the gesture is detected
///
///
/// returns:
/// The gesture recognizer that has been added
- (UIGestureRecognizer * _Nonnull)addActionWithAction:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'UIView.addAction(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.2.2 effective-4.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Actions",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Protocol used to convert Swift closures into ObjC selectors
SWIFT_PROTOCOL("_TtP7Actions6Action_")
@protocol Action
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly) SEL _Nonnull selector;
@end




@interface NSNotificationCenter (SWIFT_EXTENSION(Actions))
/// Adds an entry to the receiver’s dispatch table with a closure and optional criteria: notification name and sender.
/// The observation lives until it is manually stopped,, so be sure to invoke <code>stopObserving(_)</code> when the observation is not longer needed
/// \param name The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param object The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer. Default is <code>nil</code>.
///
/// \param action The closure which will be called when a notification with the criteria is sent
///
///
/// returns:
/// The action that has been added to the receiver. You can catch this value to stop observing it by calling <code>stopObserving(_)</code>.
- (id <Action> _Nonnull)observe:(NSNotificationName _Nullable)name object:(id _Nullable)object action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.observe(_:object:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Adds an entry to the receiver’s dispatch table with a closure and optional criteria: notification name and sender.
/// The observation lives while the <code>observer</code> is not deallocated. In case you need stop the observation before the òbserver<code>is deallocated, you can do it by invoking</code>stopObserving(_)`.
/// note:
/// Due to internal implementation, the defaul method <code>removeObserver</code> not take any effect on obervations registered using this method.
/// \param observer Object registering as an observer. This value must not be nil.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param name The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param object The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer. Default is <code>nil</code>.
///
/// \param action The closure which will be called when a notification with the criteria is sent
///
///
/// returns:
/// The action that has been added to the receiver. You can catch this value to stop observing it by calling <code>stopObserving(_)</code>.
- (id <Action> _Nonnull)addWithObserver:(NSObject * _Nonnull)observer name:(NSNotificationName _Nullable)name object:(id _Nullable)object action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.add(observer:name:object:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Stop observing the given action.
/// \param action The action which won’t be observed anymore
///
- (void)stopObservingWithAction:(id <Action> _Nonnull)action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.stopObserving(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Removes all the entries specifying a given observer from the receiver’s dispatch table.
/// Be sure to invoke this method (or stopObserver(_:name:object:)) before observer or any object specified in add(observer:name:action:) is deallocated.
/// You should not use this method to remove all observers from an object that is going to be long-lived, because your code may not be the only code adding observers that involve the object.
/// \param observer Object unregistered as observer.
///
/// \param name The name of the notification for which to unregister the observer; if nil, notifications with any name will be stopped.
///
/// \param object The object whose notifications the observer wants to stop; if nil, notifications from any object will be stopped.
///
- (void)stopObserver:(NSObject * _Nonnull)observer name:(NSNotificationName _Nullable)name object:(id _Nullable)object SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.stopObserver(_:name:object:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface NSTimer (SWIFT_EXTENSION(Actions))
/// \code
/// Initializes a new Timer object using the specified action.
/// The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is true, every ti after that.
/// - parameter fireAt: The time at which the timer should first fire.
/// - parameter interval: For a repeating timer, this parameter contains the number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
/// - parameter userInfo: Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
/// - parameter repeats: If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
/// - parameter action: The closure called on the timeout
/// - returns: The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is YES, every ti after that.
///
/// \endcode
- (nonnull instancetype)initWithFireAt:(NSDate * _Nonnull)fireDate interval:(NSTimeInterval)interval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'Timer.init(fireAt:interval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new Timer object using the specified action.
/// The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is true, every ti after that.
/// \param timeInterval The number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
///
/// \param userInfo Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
///
/// \param repeats If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
///
/// \param action The closure called on the timeout
///
///
/// returns:
/// A new Timer object, configured according to the specified parameters.
- (nonnull instancetype)initWithTimeInterval:(NSTimeInterval)interval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'Timer.init(timeInterval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Creates and returns a new Timer object and schedules it on the current run loop in the default mode.
/// \param timeInterval The number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
///
/// \param userInfo Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
///
/// \param repeats If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
///
/// \param action The closure called on the timeout
///
///
/// returns:
/// A new Timer object, configured according to the specified parameters.
+ (NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)timeInterval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'Timer.scheduledTimer(timeInterval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

@class UIImage;

@interface UIBarButtonItem (SWIFT_EXTENSION(Actions))
/// Initializes a new item using the specified image and other properties.
/// \param image The images displayed on the bar are derived from this image. If this image is too large to fit on the bar, it is scaled to fit. Typically, the size of a toolbar and navigation bar image is 20 x 20 points. The alpha values in the source image are used to create the images—opaque values are ignored.
///
/// \param landscapeImagePhone The style of the item. One of the constants defined in UIBarButtonItemStyle. nil by default
///
/// \param style The style of the item. One of the constants defined in UIBarButtonItemStyle. (.Plain by default)
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image landscapeImagePhone:(UIImage * _Nullable)landscapeImagePhone style:(UIBarButtonItemStyle)style action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(image:landscapeImagePhone:style:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new item using the specified title and other properties.
/// \param title The item’s title.
///
/// \param style The style of the item. One of the constants defined in UIBarButtonItemStyle. (.Plain by default)
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title style:(UIBarButtonItemStyle)style action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(title:style:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new item containing the specified system item.
/// \param systemItem The system item to use as the first item on the bar. One of the constants defined in UIBarButtonSystemItem.
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithBarButtonSystemItem:(UIBarButtonSystemItem)systemItem action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(barButtonSystemItem:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIControl (SWIFT_EXTENSION(Actions))
/// Add an action for the given control evetn.
/// The action is not performed immediately, instead it is scheduled to be executed after the given time interval.
/// If the control event is triggered again before the time interval expires, the previous call is canceled.
/// It prevents the action of being triggered more than once in the given time interval.
/// \param event The event which triggers the action
///
/// \param interval The time interval to wait before performing the action
///
/// \param handler The action which will be executed when the time itnerval expires.
///
- (void)throttle:(UIControlEvents)event interval:(NSTimeInterval)interval handler:(void (^ _Nonnull)(void))handler SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.throttle(_:interval:handler:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Remove the current Throttle (if any) for the given control event
/// \param event The event whose Throttle will be removed
///
- (void)removeThrottleFor:(UIControlEvents)event SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.removeThrottle(for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIControl (SWIFT_EXTENSION(Actions))
/// Adds the given action as response to the given control event.
/// \param event The event that the control must receive to trigger the closure
///
/// \param action The closure that will be called when the gesture is detected
///
///
/// returns:
/// The added action
- (id <Action> _Nonnull)addWithEvent:(UIControlEvents)event action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.add(event:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable the given action to be launched as response of the received event
/// \param action The action to disable
///
/// \param events The control events that you want to remove for the specified target object
///
- (void)removeWithAction:(id <Action> _Nonnull)action forControlEvents:(UIControlEvents)events SWIFT_DEPRECATED_MSG("Use remove(_:for:) instead") SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.remove(action:forControlEvents:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable the given action to be launched as response of the received event
/// \param action The action to disable
///
/// \param events The control events that you want to remove for the specified target object
///
- (void)remove:(id <Action> _Nonnull)action for:(UIControlEvents)events SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.remove(_:for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable all the actions for a given event to be launched as response of the received event.
/// <em>NOTE</em>: Just the actions added using the <code>Actions</code> method will be removed!.
/// \param events The control events that you want to remove for the specified target object
///
- (void)removeActionsFor:(UIControlEvents)events SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.removeActions(for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(Actions))
/// Initializes a new item with the given action
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified action.
- (nonnull instancetype)initWithAction:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIGestureRecognizer.init(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIView (SWIFT_EXTENSION(Actions))
/// Adds the given action as response to a single tap gesture.
/// \param gesture The gesture that the view must receive to trigger the closure
///
/// \param action The closure that will be called when the gesture is detected
///
///
/// returns:
/// The gesture recognizer that has been added
- (UIGestureRecognizer * _Nonnull)addActionWithAction:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'UIView.addAction(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.2 effective-4.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Actions",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Protocol used to convert Swift closures into ObjC selectors
SWIFT_PROTOCOL("_TtP7Actions6Action_")
@protocol Action
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly) SEL _Nonnull selector;
@end




@interface NSNotificationCenter (SWIFT_EXTENSION(Actions))
/// Adds an entry to the receiver’s dispatch table with a closure and optional criteria: notification name and sender.
/// The observation lives until it is manually stopped,, so be sure to invoke <code>stopObserving(_)</code> when the observation is not longer needed
/// \param name The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param object The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer. Default is <code>nil</code>.
///
/// \param action The closure which will be called when a notification with the criteria is sent
///
///
/// returns:
/// The action that has been added to the receiver. You can catch this value to stop observing it by calling <code>stopObserving(_)</code>.
- (id <Action> _Nonnull)observe:(NSNotificationName _Nullable)name object:(id _Nullable)object action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.observe(_:object:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Adds an entry to the receiver’s dispatch table with a closure and optional criteria: notification name and sender.
/// The observation lives while the <code>observer</code> is not deallocated. In case you need stop the observation before the òbserver<code>is deallocated, you can do it by invoking</code>stopObserving(_)`.
/// note:
/// Due to internal implementation, the defaul method <code>removeObserver</code> not take any effect on obervations registered using this method.
/// \param observer Object registering as an observer. This value must not be nil.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param name The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param object The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer. Default is <code>nil</code>.
///
/// \param action The closure which will be called when a notification with the criteria is sent
///
///
/// returns:
/// The action that has been added to the receiver. You can catch this value to stop observing it by calling <code>stopObserving(_)</code>.
- (id <Action> _Nonnull)addWithObserver:(NSObject * _Nonnull)observer name:(NSNotificationName _Nullable)name object:(id _Nullable)object action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.add(observer:name:object:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Stop observing the given action.
/// \param action The action which won’t be observed anymore
///
- (void)stopObservingWithAction:(id <Action> _Nonnull)action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.stopObserving(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Removes all the entries specifying a given observer from the receiver’s dispatch table.
/// Be sure to invoke this method (or stopObserver(_:name:object:)) before observer or any object specified in add(observer:name:action:) is deallocated.
/// You should not use this method to remove all observers from an object that is going to be long-lived, because your code may not be the only code adding observers that involve the object.
/// \param observer Object unregistered as observer.
///
/// \param name The name of the notification for which to unregister the observer; if nil, notifications with any name will be stopped.
///
/// \param object The object whose notifications the observer wants to stop; if nil, notifications from any object will be stopped.
///
- (void)stopObserver:(NSObject * _Nonnull)observer name:(NSNotificationName _Nullable)name object:(id _Nullable)object SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.stopObserver(_:name:object:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface NSTimer (SWIFT_EXTENSION(Actions))
/// \code
/// Initializes a new Timer object using the specified action.
/// The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is true, every ti after that.
/// - parameter fireAt: The time at which the timer should first fire.
/// - parameter interval: For a repeating timer, this parameter contains the number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
/// - parameter userInfo: Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
/// - parameter repeats: If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
/// - parameter action: The closure called on the timeout
/// - returns: The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is YES, every ti after that.
///
/// \endcode
- (nonnull instancetype)initWithFireAt:(NSDate * _Nonnull)fireDate interval:(NSTimeInterval)interval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'Timer.init(fireAt:interval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new Timer object using the specified action.
/// The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is true, every ti after that.
/// \param timeInterval The number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
///
/// \param userInfo Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
///
/// \param repeats If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
///
/// \param action The closure called on the timeout
///
///
/// returns:
/// A new Timer object, configured according to the specified parameters.
- (nonnull instancetype)initWithTimeInterval:(NSTimeInterval)interval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'Timer.init(timeInterval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Creates and returns a new Timer object and schedules it on the current run loop in the default mode.
/// \param timeInterval The number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
///
/// \param userInfo Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
///
/// \param repeats If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
///
/// \param action The closure called on the timeout
///
///
/// returns:
/// A new Timer object, configured according to the specified parameters.
+ (NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)timeInterval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'Timer.scheduledTimer(timeInterval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

@class UIImage;

@interface UIBarButtonItem (SWIFT_EXTENSION(Actions))
/// Initializes a new item using the specified image and other properties.
/// \param image The images displayed on the bar are derived from this image. If this image is too large to fit on the bar, it is scaled to fit. Typically, the size of a toolbar and navigation bar image is 20 x 20 points. The alpha values in the source image are used to create the images—opaque values are ignored.
///
/// \param landscapeImagePhone The style of the item. One of the constants defined in UIBarButtonItemStyle. nil by default
///
/// \param style The style of the item. One of the constants defined in UIBarButtonItemStyle. (.Plain by default)
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image landscapeImagePhone:(UIImage * _Nullable)landscapeImagePhone style:(UIBarButtonItemStyle)style action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(image:landscapeImagePhone:style:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new item using the specified title and other properties.
/// \param title The item’s title.
///
/// \param style The style of the item. One of the constants defined in UIBarButtonItemStyle. (.Plain by default)
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title style:(UIBarButtonItemStyle)style action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(title:style:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new item containing the specified system item.
/// \param systemItem The system item to use as the first item on the bar. One of the constants defined in UIBarButtonSystemItem.
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithBarButtonSystemItem:(UIBarButtonSystemItem)systemItem action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(barButtonSystemItem:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIControl (SWIFT_EXTENSION(Actions))
/// Add an action for the given control evetn.
/// The action is not performed immediately, instead it is scheduled to be executed after the given time interval.
/// If the control event is triggered again before the time interval expires, the previous call is canceled.
/// It prevents the action of being triggered more than once in the given time interval.
/// \param event The event which triggers the action
///
/// \param interval The time interval to wait before performing the action
///
/// \param handler The action which will be executed when the time itnerval expires.
///
- (void)throttle:(UIControlEvents)event interval:(NSTimeInterval)interval handler:(void (^ _Nonnull)(void))handler SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.throttle(_:interval:handler:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Remove the current Throttle (if any) for the given control event
/// \param event The event whose Throttle will be removed
///
- (void)removeThrottleFor:(UIControlEvents)event SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.removeThrottle(for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIControl (SWIFT_EXTENSION(Actions))
/// Adds the given action as response to the given control event.
/// \param event The event that the control must receive to trigger the closure
///
/// \param action The closure that will be called when the gesture is detected
///
///
/// returns:
/// The added action
- (id <Action> _Nonnull)addWithEvent:(UIControlEvents)event action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.add(event:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable the given action to be launched as response of the received event
/// \param action The action to disable
///
/// \param events The control events that you want to remove for the specified target object
///
- (void)removeWithAction:(id <Action> _Nonnull)action forControlEvents:(UIControlEvents)events SWIFT_DEPRECATED_MSG("Use remove(_:for:) instead") SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.remove(action:forControlEvents:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable the given action to be launched as response of the received event
/// \param action The action to disable
///
/// \param events The control events that you want to remove for the specified target object
///
- (void)remove:(id <Action> _Nonnull)action for:(UIControlEvents)events SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.remove(_:for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable all the actions for a given event to be launched as response of the received event.
/// <em>NOTE</em>: Just the actions added using the <code>Actions</code> method will be removed!.
/// \param events The control events that you want to remove for the specified target object
///
- (void)removeActionsFor:(UIControlEvents)events SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.removeActions(for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(Actions))
/// Initializes a new item with the given action
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified action.
- (nonnull instancetype)initWithAction:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIGestureRecognizer.init(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIView (SWIFT_EXTENSION(Actions))
/// Adds the given action as response to a single tap gesture.
/// \param gesture The gesture that the view must receive to trigger the closure
///
/// \param action The closure that will be called when the gesture is detected
///
///
/// returns:
/// The gesture recognizer that has been added
- (UIGestureRecognizer * _Nonnull)addActionWithAction:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'UIView.addAction(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.2 effective-4.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Actions",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Protocol used to convert Swift closures into ObjC selectors
SWIFT_PROTOCOL("_TtP7Actions6Action_")
@protocol Action
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly) SEL _Nonnull selector;
@end




@interface NSNotificationCenter (SWIFT_EXTENSION(Actions))
/// Adds an entry to the receiver’s dispatch table with a closure and optional criteria: notification name and sender.
/// The observation lives until it is manually stopped,, so be sure to invoke <code>stopObserving(_)</code> when the observation is not longer needed
/// \param name The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param object The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer. Default is <code>nil</code>.
///
/// \param action The closure which will be called when a notification with the criteria is sent
///
///
/// returns:
/// The action that has been added to the receiver. You can catch this value to stop observing it by calling <code>stopObserving(_)</code>.
- (id <Action> _Nonnull)observe:(NSNotificationName _Nullable)name object:(id _Nullable)object action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.observe(_:object:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Adds an entry to the receiver’s dispatch table with a closure and optional criteria: notification name and sender.
/// The observation lives while the <code>observer</code> is not deallocated. In case you need stop the observation before the òbserver<code>is deallocated, you can do it by invoking</code>stopObserving(_)`.
/// note:
/// Due to internal implementation, the defaul method <code>removeObserver</code> not take any effect on obervations registered using this method.
/// \param observer Object registering as an observer. This value must not be nil.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param name The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer.
/// If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.
///
/// \param object The object whose notifications the observer wants to receive; that is, only notifications sent by this sender are delivered to the observer. Default is <code>nil</code>.
///
/// \param action The closure which will be called when a notification with the criteria is sent
///
///
/// returns:
/// The action that has been added to the receiver. You can catch this value to stop observing it by calling <code>stopObserving(_)</code>.
- (id <Action> _Nonnull)addWithObserver:(NSObject * _Nonnull)observer name:(NSNotificationName _Nullable)name object:(id _Nullable)object action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.add(observer:name:object:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Stop observing the given action.
/// \param action The action which won’t be observed anymore
///
- (void)stopObservingWithAction:(id <Action> _Nonnull)action SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.stopObserving(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Removes all the entries specifying a given observer from the receiver’s dispatch table.
/// Be sure to invoke this method (or stopObserver(_:name:object:)) before observer or any object specified in add(observer:name:action:) is deallocated.
/// You should not use this method to remove all observers from an object that is going to be long-lived, because your code may not be the only code adding observers that involve the object.
/// \param observer Object unregistered as observer.
///
/// \param name The name of the notification for which to unregister the observer; if nil, notifications with any name will be stopped.
///
/// \param object The object whose notifications the observer wants to stop; if nil, notifications from any object will be stopped.
///
- (void)stopObserver:(NSObject * _Nonnull)observer name:(NSNotificationName _Nullable)name object:(id _Nullable)object SWIFT_DEPRECATED_OBJC("Swift method 'NotificationCenter.stopObserver(_:name:object:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface NSTimer (SWIFT_EXTENSION(Actions))
/// \code
/// Initializes a new Timer object using the specified action.
/// The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is true, every ti after that.
/// - parameter fireAt: The time at which the timer should first fire.
/// - parameter interval: For a repeating timer, this parameter contains the number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
/// - parameter userInfo: Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
/// - parameter repeats: If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
/// - parameter action: The closure called on the timeout
/// - returns: The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is YES, every ti after that.
///
/// \endcode
- (nonnull instancetype)initWithFireAt:(NSDate * _Nonnull)fireDate interval:(NSTimeInterval)interval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'Timer.init(fireAt:interval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new Timer object using the specified action.
/// The receiver, initialized such that, when added to a run loop, it will fire at date and then, if repeats is true, every ti after that.
/// \param timeInterval The number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
///
/// \param userInfo Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
///
/// \param repeats If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
///
/// \param action The closure called on the timeout
///
///
/// returns:
/// A new Timer object, configured according to the specified parameters.
- (nonnull instancetype)initWithTimeInterval:(NSTimeInterval)interval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'Timer.init(timeInterval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Creates and returns a new Timer object and schedules it on the current run loop in the default mode.
/// \param timeInterval The number of seconds between firings of the timer. If ti is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
///
/// \param userInfo Custom user info for the timer. The timer maintains a strong reference to this object until it (the timer) is invalidated. This parameter is nil by default.
///
/// \param repeats If true, the timer will repeatedly reschedule itself until invalidated. If false, the timer will be invalidated after it fires. Default is false
///
/// \param action The closure called on the timeout
///
///
/// returns:
/// A new Timer object, configured according to the specified parameters.
+ (NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)timeInterval userInfo:(id _Nullable)userInfo repeats:(BOOL)repeats action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'Timer.scheduledTimer(timeInterval:userInfo:repeats:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

@class UIImage;

@interface UIBarButtonItem (SWIFT_EXTENSION(Actions))
/// Initializes a new item using the specified image and other properties.
/// \param image The images displayed on the bar are derived from this image. If this image is too large to fit on the bar, it is scaled to fit. Typically, the size of a toolbar and navigation bar image is 20 x 20 points. The alpha values in the source image are used to create the images—opaque values are ignored.
///
/// \param landscapeImagePhone The style of the item. One of the constants defined in UIBarButtonItemStyle. nil by default
///
/// \param style The style of the item. One of the constants defined in UIBarButtonItemStyle. (.Plain by default)
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image landscapeImagePhone:(UIImage * _Nullable)landscapeImagePhone style:(UIBarButtonItemStyle)style action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(image:landscapeImagePhone:style:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new item using the specified title and other properties.
/// \param title The item’s title.
///
/// \param style The style of the item. One of the constants defined in UIBarButtonItemStyle. (.Plain by default)
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title style:(UIBarButtonItemStyle)style action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(title:style:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Initializes a new item containing the specified system item.
/// \param systemItem The system item to use as the first item on the bar. One of the constants defined in UIBarButtonSystemItem.
///
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified properties.
- (nonnull instancetype)initWithBarButtonSystemItem:(UIBarButtonSystemItem)systemItem action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIBarButtonItem.init(barButtonSystemItem:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIControl (SWIFT_EXTENSION(Actions))
/// Add an action for the given control evetn.
/// The action is not performed immediately, instead it is scheduled to be executed after the given time interval.
/// If the control event is triggered again before the time interval expires, the previous call is canceled.
/// It prevents the action of being triggered more than once in the given time interval.
/// \param event The event which triggers the action
///
/// \param interval The time interval to wait before performing the action
///
/// \param handler The action which will be executed when the time itnerval expires.
///
- (void)throttle:(UIControlEvents)event interval:(NSTimeInterval)interval handler:(void (^ _Nonnull)(void))handler SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.throttle(_:interval:handler:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Remove the current Throttle (if any) for the given control event
/// \param event The event whose Throttle will be removed
///
- (void)removeThrottleFor:(UIControlEvents)event SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.removeThrottle(for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIControl (SWIFT_EXTENSION(Actions))
/// Adds the given action as response to the given control event.
/// \param event The event that the control must receive to trigger the closure
///
/// \param action The closure that will be called when the gesture is detected
///
///
/// returns:
/// The added action
- (id <Action> _Nonnull)addWithEvent:(UIControlEvents)event action:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.add(event:action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable the given action to be launched as response of the received event
/// \param action The action to disable
///
/// \param events The control events that you want to remove for the specified target object
///
- (void)removeWithAction:(id <Action> _Nonnull)action forControlEvents:(UIControlEvents)events SWIFT_DEPRECATED_MSG("Use remove(_:for:) instead") SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.remove(action:forControlEvents:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable the given action to be launched as response of the received event
/// \param action The action to disable
///
/// \param events The control events that you want to remove for the specified target object
///
- (void)remove:(id <Action> _Nonnull)action for:(UIControlEvents)events SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.remove(_:for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Disable all the actions for a given event to be launched as response of the received event.
/// <em>NOTE</em>: Just the actions added using the <code>Actions</code> method will be removed!.
/// \param events The control events that you want to remove for the specified target object
///
- (void)removeActionsFor:(UIControlEvents)events SWIFT_DEPRECATED_OBJC("Swift method 'UIControl.removeActions(for:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(Actions))
/// Initializes a new item with the given action
/// \param action The action to be called when the button is tapped
///
///
/// returns:
/// Newly initialized item with the specified action.
- (nonnull instancetype)initWithAction:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift initializer 'UIGestureRecognizer.init(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIView (SWIFT_EXTENSION(Actions))
/// Adds the given action as response to a single tap gesture.
/// \param gesture The gesture that the view must receive to trigger the closure
///
/// \param action The closure that will be called when the gesture is detected
///
///
/// returns:
/// The gesture recognizer that has been added
- (UIGestureRecognizer * _Nonnull)addActionWithAction:(void (^ _Nonnull)(void))action SWIFT_DEPRECATED_OBJC("Swift method 'UIView.addAction(action:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
